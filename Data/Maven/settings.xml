<?xml version="1.0" encoding="GBK"?>

<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
 
  <!--本地仓库。该值表示构建系统本地仓库的路径。其默认值为${user.home}/.m2/repository。-->  
<localRepository>D:\MAVEN\repository</localRepository>
 
  <!--Maven是否需要和用户交互以获得输入。
	如果Maven需要和用户交互以获得输入，则设置成true，反之则应为false。默认为true。 --> 
<interactiveMode>true</interactiveMode>
 
  <!--表示Maven是否需要在离线模式下运行。
	如果构建系统需要在离线模式下运行，则为true，默认为false。  -->
<offline>true</offline>

  <!--当插件的组织Id（groupId）没有显式提供时，供搜寻插件组织Id（groupId）的列表。  -->  
    <!--该元素包含一个pluginGroup元素列表，每个子元素包含了一个组织Id（groupId）。  -->  
    <!--当我们使用某个插件，并且没有在命令行为其提供组织Id（groupId）的时候，Maven就会使用该列表。  -->    
  <pluginGroups>
    <!--默认情况下该列表包含了org.apache.maven.plugins。  -->
	 <!--plugin的组织Id（groupId） <pluginGroup>com.your.plugins</pluginGroup> -->  
	
  </pluginGroups>

 <!--用来配置不同的代理，多代理profiles可以应对笔记本或移动设备的工作环境：
	通过简单的设置profile id就可以很容易的更换整个代理配置。--> 
<!--  <proxies>  -->
     <!--代理元素包含配置代理时需要的信息 --> 
<!--    <proxy>  -->
	  <!--代理的唯一定义符，用来区分不同的代理元素。<id>optional</id> -->  
      

	  <!--该代理是否是激活的那个。true则激活代理。
		当我们声明了一组代理，而某个时候只需要激活一个代理的时候，该元素就可以派上用处。
		<active>true</active>
		-->  
      

	  <!--代理的协议。 协议://主机名:端口，分隔成离散的元素以方便配置。
		<protocol>http</protocol>
	  -->  
      

	   <!--代理的用户名，用户名和密码表示代理服务器认证的登录名和密码。
		<username>proxyuser</username>
	   -->   
      

	  <!--代理的密码，用户名和密码表示代理服务器认证的登录名和密码。
		 <password>proxypass</password>
	  --> 
     
	  <!--代理的主机名。协议://主机名:端口，分隔成离散的元素以方便配置。 
		 <host>proxy.host.net</host>
	  -->    
     

	  <!--代理的端口。协议://主机名:端口，分隔成离散的元素以方便配置。<port>80</port>  --> 
      

	   <!--不该被代理的主机名列表。该列表的分隔符由代理服务器指定；例子中使用了竖线分隔符，使用逗号分隔也很常见。
		<nonProxyHosts>local.net|some.host.com</nonProxyHosts>
	   -->  
      
<!--    </proxy>
    
  </proxies>  -->

   <!--配置服务端的一些设置。一些设置如安全证书不应该和pom.xml一起分发。这种类型的信息应该存在于构建服务器上的settings.xml文件中。 -->  
<!--  <servers>  -->
      <!--服务器元素包含配置服务器时需要的信息  -->  
<!--    <server>  -->
	  <!--这是server的id（注意不是用户登陆的id），
		该id与distributionManagement中repository元素的id相匹配。
			 <id>deploymentRepo</id>
		-->  
     
		
		<!--鉴权用户名。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。
		 <username>repouser</username>
		--> 
     

		 <!--鉴权密码 。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。
		 <password>repopwd</password>
		 -->  
      
	  
		 <!--鉴权时使用的私钥位置。和前两个元素类似，私钥位置和私钥密码指定了一个私钥的路径（默认是/home/hudson/.ssh/id_dsa）以及如果需要的话，一个密钥 -->  
            <!--将来passphrase和password元素可能会被提取到外部，
				但目前它们必须在settings.xml文件以纯文本的形式声明。
			<privateKey>${usr.home}/.ssh/id_dsa</privateKey>  
			-->  
                
            <!--鉴权时使用的私钥密码。
			<passphrase>some_passphrase</passphrase> 
			-->  
             
                
            <!--文件被创建时的权限。如果在部署的时候会创建一个仓库文件或者目录，这时候就可以使用权限（permission）。-->  
            <!--这两个元素合法的值是一个三位数字，其对应了unix文件系统的权限，如664，或者775。 
			 <filePermissions>664</filePermissions>  
			-->  
                          
            <!--目录被创建时的权限。 
			 <directoryPermissions>775</directoryPermissions>  
			-->  
                          
            <!--传输层额外的配置项 
			 <configuration></configuration> 
			-->  

<!--    </server>

  </servers>  -->

  <!--为仓库列表配置的下载镜像列表。  --> 
  <mirrors>
     <!--给定仓库的下载镜像。  -->  
    <mirror>
		<!--该镜像的唯一标识符。id用来区分不同的mirror元素。  --> 
      <id>nexus-aliyun</id>

	   <!--被镜像的服务器的id。例如，如果我们要设置了一个Maven中央仓库（http://repo1.maven.org/maven2）的镜像，-->  
            <!--就需要将该元素设置成central。这必须和中央仓库的id central完全一致。 -->  
      <mirrorOf>central</mirrorOf>
	
		<!--镜像名称  -->  
      <name>Nexus aliyun</name>

	  <!--该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。  --> 
      <!--<url>http://maven.aliyun.com/nexus/content/groups/public</url>	-->
	  <url>http://maven.aliyun.com/nexus/content/repositories/central</url>  
    </mirror>
    


  </mirrors>

  <!--根据环境参数来调整构建配置的列表。settings.xml中的profile元素是pom.xml中profile元素的裁剪版本。-->  
    <!--它包含了id，activation, repositories, pluginRepositories和 properties元素。-->  
    <!--这里的profile元素只包含这五个子元素是因为这里只关心构建系统这个整体（这正是settings.xml文件的角色定位），而非单独的项目对象模型设置。-->  
    <!--如果一个settings中的profile被激活，它的值会覆盖任何其它定义在POM中或者profile.xml中的带有相同id的profile。  --> 
  <profiles>
    <!-- profile
	 | 根据环境参数来调整的构件的配置 
    <profile>
		该配置的唯一标识符。  
      <id>jdk-1.4</id>
		profile默认是否激活的标识
      <activation>
		activation有一个内建的java版本检测，如果检测到jdk版本与期待的一样，profile被激活。
        <jdk>1.4</jdk>
      </activation>
		
		对应profile的扩展属性列表。Maven属性和Ant中的属性一样，可以用来存放一些值。这些值可以在POM中		的任何地方使用标记${X}来使用，这里X是指属性的名称。
		属性有五种不同的形式，并且都能在settings.xml文件中访问。
		1. env.X: 在一个变量前加上"env."的前缀，会返回一个shell环境变量。
			例如,"env.PATH"指代了$path环境变量（在Windows上是%PATH%）。
		2. project.x：指代了POM中对应的元素值。
		3. settings.x: 指代了settings.xml中对应元素的值。
		4. Java System Properties: 
			所有可通过java.lang.System.getProperties()访问的属性都能在POM中使用该形式访问，
			 如/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0/jre。
		5. x: 在<properties/>元素中，或者外部文件中设置，以${someVar}的形式使用。
      <repositories>
        <repository>
          <id>jdk14</id>
          <name>Repository for JDK 1.4 builds</name>
          <url>http://www.myhost.com/maven/jdk14</url>
          <layout>default</layout>
          <snapshotPolicy>always</snapshotPolicy>
        </repository>
      </repositories>
    </profile>
    -->

    <!--
     | Here is another profile, activated by the system property 'target-env' with a value of 'dev',
     | which provides a specific path to the Tomcat instance. To use this, your plugin configuration
     | might hypothetically look like:
     |
     | ...
     | <plugin>
     |   <groupId>org.myco.myplugins</groupId>
     |   <artifactId>myplugin</artifactId>
     |
     |   <configuration>
     |     <tomcatLocation>${tomcatPath}</tomcatLocation>
     |   </configuration>
     | </plugin>
     | ...
     |
     | NOTE: If you just wanted to inject this configuration whenever someone set 'target-env' to
     |       anything, you could just leave off the <value/> inside the activation-property.
     |
    <profile>
      <id>env-dev</id>

      <activation>
        <property>
          <name>target-env</name>
          <value>dev</value>
        </property>
      </activation>

      <properties>
        <tomcatPath>/path/to/tomcat/instance</tomcatPath>
      </properties>
    </profile>
    -->
  </profiles>

  <!-- activeProfiles
   | List of profiles that are active for all builds.
   |手动激活profiles的列表，按照profile被应用的顺序定义activeProfile。
	该元素包含了一组activeProfile元素，每个activeProfile都含有一个profile id。
	任何在activeProfile中定义的profile id，不论环境设置如何，其对应的 profile都会被激活。
	如果没有匹配的profile，则什么都不会发生。例如，env-test是一个activeProfile，则在pom.xml（或者profile.xml）中对应id的profile会被激活。
	如果运行过程中找不到这样一个profile，Maven则会像往常一样运行。
  <activeProfiles>
    <activeProfile>alwaysActiveProfile</activeProfile>
    <activeProfile>anotherAlwaysActiveProfile</activeProfile>
  </activeProfiles>
  -->
</settings>
