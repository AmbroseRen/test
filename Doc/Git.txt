--配置查询
#查看系统配置
git config --system --list

#查看当前用户配置
git config --global  --list

#查看当前仓库配置信息
git config --local  --list

--初始化
git config –global user.name ‘xxxxx’ 
git config –global user.email ‘xxx@xx.xxx’
ssh-keygen -t rsa -C ‘上面的邮箱’
指定目录：   C:\MykeysForGit\id_rsa
测试：    ssh -T git@github.com 
--！！！关联远程仓库(SSH)：
  先查看
git remote -v
--添加多个remote  URL
git remote add origin <url>	//添加第一个地址
git remote set-url --add origin https://github.com/AmbroseRen/databases.git   //添加第二个地址
--删除修改URL
git remote rm origin
git remote set-url origin https://github.com/AmbroseRen/databases.git
--推送到GitHub上： 
--准备工作： 
git init
git add .
git commit -m "提交注释"
git push origin master	//推送所有文件
--推送到指定库
git push -u origin Hike
--同步：
git pull --rebase origin master
///////手动修改配置文件
vi git/config	vim编辑器模式

git branch -v<可看到每个分支最后一次提交>  查看分支
git rebase origin  创建新分支保存/合并分支
git add filename  追加提交冲突文件-
git rebase --continue  继续合并
git merge [alias][/branch]  拉取分支到当前分支
git branch -d(branchname)  删除分支
git init  初始化一个.git文件夹
git clone [url]  克隆指定仓库
cd git -start  进入仓库
git remote -v<只显示URL>  查看远程服务器简写
git reflog  记录分支变化或HEAD引用变化<HEAD@{0}为当前值，HEAD@{3}代表3次变化之前的值> 
         
git remote show [remote-name]  查看远程仓库
git fetch [remote-name]  拉取远程仓库数据
git push origen master  总推送
git push [remote-name] [branch-name]  推送到上游
git pull [remote-name] [branch-name]  拉取到本地
git remote rename [name] [newname]  远程仓库重命名
--栈快照
git stash [save[--patch][] ] "message"  把当前的改动压入一个栈
git stash list  显示暂存栈的目录
git stash apply [<stash>]@[--index]  取出栈文件但不删除文件
git stash apply stash@{0}  取出栈中项目  
git stash pop [<stash>]@[--index]  删除栈中标签且恢复进度
git stash pop stash@{0}
git stash drop stash@{1}  删除存储为1的进度<默认最新进度为0>
git stash branch<branchname><stash>  删除分支存储进度
git stash clear  清空栈
--日志
git log [url] --pretty=format:"%h - %an, %ar : %s"  --graph  图形化显示分支合并历史
git log -p<显示每次提交的内容差异> -num<仅显示最近提交>
git log --pretty=oneline   将每个提交放在一行显示<提交数很大时用>
git log --pretty=format:"%h %an, %ar : %s"  客制定git显示格式
git log --stat  查看提交的简略统计
git log --since=2.weeks  限制最近两周内的提交
git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/  查询作者为***08年10月--11月内的提交
  <退出按Q键>
--常用占位符写法及其代表含义
选项	 说明
%H	提交对象（commit）的完整哈希字串
%h	提交对象的简短哈希字串
%T	树对象（tree）的完整哈希字串
%t	树对象的简短哈希字串
%P	父对象（parent）的完整哈希字串
%p	父对象的简短哈希字串
%an	作者（author）的名字
%ae	作者的电子邮件地址
%ad	作者修订日期（可以用 -date= 选项定制格式）
%ar	作者修订日期，按多久以前的方式显示
%cn	提交者(committer)的名字
%ce	提交者的电子邮件地址
%cd	提交日期
%cr	提交日期，按多久以前的方式显示
%s	提交说明
选项 说明
-p 按补丁格式显示每个更新之间的差异。
--stat 显示每次更新的文件修改统计信息。
--shortstat 只显示 --stat 中最后的行数修改添加移除统计。
--name-only 仅在提交信息后显示已修改的文件清单。
--name-status 显示新增、修改、删除的文件清单。
--abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。
--relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）。
--graph 显示 ASCII 图形表示的分支合并历史。
--pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。
选项 说明
-(n)	仅显示最近的 n 条提交
--since, --after 仅显示指定时间之后的提交。
--until, --before 仅显示指定时间之前的提交。
--author 仅显示指定作者相关的提交。
--committer 仅显示指定提交者相关的提交。
--状态
git status  查询stash栈内的文件
git status -s  
git status --short  
git add  提交到stash暂存区
git diff --cached/staged  对比本地和已暂存区的差异
--栈操作
git reset HEAD filename  取消stash内的暂存文件
git checkout (branchname)<会删除文件中没有暂存和提交的改动>  切换到一个分支
git checkout -b (branchname)  创建并切换到新的分支
git revert  HEAD  撤销最近的提交
git rm file 从stash移除文件且移除工作目录
     rm --cached  从stash移除文件但保留在工作空间
git mv file_from_file_to
git clean  从工作目录移除没有track的文件
--提交
git tag -a v1.0  添加版本发布的信息
git commit -m "memo"  提交add改动到本地仓库
git add forgoten_file  追加
git commit --amend  追加代替第一次提交
^n  为^1~^n即1~n个提交
--忽略文件
$ cat .gitignore
*.[memo]
*~  忽略类似结尾文件
